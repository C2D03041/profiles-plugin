package com.awooga.profiles;

import lombok.Builder;
import lombok.experimental.Delegate;
import org.bukkit.*;
import org.bukkit.advancement.Advancement;
import org.bukkit.advancement.AdvancementProgress;
import org.bukkit.attribute.Attribute;
import org.bukkit.attribute.AttributeInstance;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.block.PistonMoveReaction;
import org.bukkit.block.data.BlockData;
import org.bukkit.conversations.Conversation;
import org.bukkit.conversations.ConversationAbandonedEvent;
import org.bukkit.entity.*;
import org.bukkit.entity.memory.MemoryKey;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.inventory.*;
import org.bukkit.map.MapView;
import org.bukkit.metadata.MetadataValue;
import org.bukkit.permissions.Permission;
import org.bukkit.permissions.PermissionAttachment;
import org.bukkit.permissions.PermissionAttachmentInfo;
import org.bukkit.persistence.PersistentDataContainer;
import org.bukkit.plugin.Plugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scoreboard.Scoreboard;
import org.bukkit.util.BoundingBox;
import org.bukkit.util.RayTraceResult;
import org.bukkit.util.Vector;

import java.net.InetSocketAddress;
import java.util.*;

@Builder
public class ProfilePlayerImpl implements Player, OfflinePlayer {
	Player actualPlayer;

	UUID overrideUuid;

	@Override
	public UUID getUniqueId() {
		if(Objects.nonNull(this.overrideUuid)) {
			return this.overrideUuid;
		} else {
			return actualPlayer.getUniqueId();
		}
	}

	// =====================================================
	// EVERYTHING BELOW HERE IS AN AUTOGENERATED DELEGATOR.
	// IF YOU MUST MODIFY A FUNCTION BELOW HERE, MOVE IT ABOVE THIS FOLD
	// =====================================================

	@Override
	public float getAttackCooldown() {
		return actualPlayer.getAttackCooldown();
	}

	@Override
	public String getDisplayName() {
		return actualPlayer.getDisplayName();
	}

	@Override
	public void setDisplayName(String name) {
		actualPlayer.setDisplayName(name);
	}

	@Override
	public String getPlayerListName() {
		return actualPlayer.getPlayerListName();
	}

	@Override
	public void setPlayerListName(String name) {
		actualPlayer.setPlayerListName(name);
	}

	@Override
	public String getPlayerListHeader() {
		return actualPlayer.getPlayerListHeader();
	}

	@Override
	public String getPlayerListFooter() {
		return actualPlayer.getPlayerListFooter();
	}

	@Override
	public void setPlayerListHeader(String header) {
		actualPlayer.setPlayerListHeader(header);
	}

	@Override
	public void setPlayerListFooter(String footer) {
		actualPlayer.setPlayerListFooter(footer);
	}

	@Override
	public void setPlayerListHeaderFooter(String header, String footer) {
		actualPlayer.setPlayerListHeaderFooter(header, footer);
	}

	@Override
	public void setCompassTarget(Location loc) {
		actualPlayer.setCompassTarget(loc);
	}

	@Override
	public Location getCompassTarget() {
		return actualPlayer.getCompassTarget();
	}

	@Override
	public InetSocketAddress getAddress() {
		return actualPlayer.getAddress();
	}

	@Override
	public void sendRawMessage(String message) {
		actualPlayer.sendRawMessage(message);
	}

	@Override
	public void kickPlayer(String message) {
		actualPlayer.kickPlayer(message);
	}

	@Override
	public void chat(String msg) {
		actualPlayer.chat(msg);
	}

	@Override
	public boolean performCommand(String command) {
		return actualPlayer.performCommand(command);
	}

	@Override
	public boolean isSneaking() {
		return actualPlayer.isSneaking();
	}

	@Override
	public void setSneaking(boolean sneak) {
		actualPlayer.setSneaking(sneak);
	}

	@Override
	public boolean isSprinting() {
		return actualPlayer.isSprinting();
	}

	@Override
	public void setSprinting(boolean sprinting) {
		actualPlayer.setSprinting(sprinting);
	}

	@Override
	public void saveData() {
		actualPlayer.saveData();
	}

	@Override
	public void loadData() {
		actualPlayer.loadData();
	}

	@Override
	public void setSleepingIgnored(boolean isSleeping) {
		actualPlayer.setSleepingIgnored(isSleeping);
	}

	@Override
	public boolean isSleepingIgnored() {
		return actualPlayer.isSleepingIgnored();
	}

	@Override
	@Deprecated
	public void playNote(Location loc, byte instrument, byte note) {
		actualPlayer.playNote(loc, instrument, note);
	}

	@Override
	public void playNote(Location loc, Instrument instrument, Note note) {
		actualPlayer.playNote(loc, instrument, note);
	}

	@Override
	public void playSound(Location location, Sound sound, float volume, float pitch) {
		actualPlayer.playSound(location, sound, volume, pitch);
	}

	@Override
	public void playSound(Location location, String sound, float volume, float pitch) {
		actualPlayer.playSound(location, sound, volume, pitch);
	}

	@Override
	public void playSound(Location location, Sound sound, SoundCategory category, float volume, float pitch) {
		actualPlayer.playSound(location, sound, category, volume, pitch);
	}

	@Override
	public void playSound(Location location, String sound, SoundCategory category, float volume, float pitch) {
		actualPlayer.playSound(location, sound, category, volume, pitch);
	}

	@Override
	public void stopSound(Sound sound) {
		actualPlayer.stopSound(sound);
	}

	@Override
	public void stopSound(String sound) {
		actualPlayer.stopSound(sound);
	}

	@Override
	public void stopSound(Sound sound, SoundCategory category) {
		actualPlayer.stopSound(sound, category);
	}

	@Override
	public void stopSound(String sound, SoundCategory category) {
		actualPlayer.stopSound(sound, category);
	}

	@Override
	@Deprecated
	public void playEffect(Location loc, Effect effect, int data) {
		actualPlayer.playEffect(loc, effect, data);
	}

	@Override
	public <T> void playEffect(Location loc, Effect effect, T data) {
		actualPlayer.playEffect(loc, effect, data);
	}

	@Override
	@Deprecated
	public void sendBlockChange(Location loc, Material material, byte data) {
		actualPlayer.sendBlockChange(loc, material, data);
	}

	@Override
	public void sendBlockChange(Location loc, BlockData block) {
		actualPlayer.sendBlockChange(loc, block);
	}

	@Override
	@Deprecated
	public boolean sendChunkChange(Location loc, int sx, int sy, int sz, byte[] data) {
		return actualPlayer.sendChunkChange(loc, sx, sy, sz, data);
	}

	@Override
	public void sendSignChange(Location loc, String[] lines) throws IllegalArgumentException {
		actualPlayer.sendSignChange(loc, lines);
	}

	@Override
	public void sendSignChange(Location loc, String[] lines, DyeColor dyeColor) throws IllegalArgumentException {
		actualPlayer.sendSignChange(loc, lines, dyeColor);
	}

	@Override
	public void sendMap(MapView map) {
		actualPlayer.sendMap(map);
	}

	@Override
	public void updateInventory() {
		actualPlayer.updateInventory();
	}

	@Override
	public void setPlayerTime(long time, boolean relative) {
		actualPlayer.setPlayerTime(time, relative);
	}

	@Override
	public long getPlayerTime() {
		return actualPlayer.getPlayerTime();
	}

	@Override
	public long getPlayerTimeOffset() {
		return actualPlayer.getPlayerTimeOffset();
	}

	@Override
	public boolean isPlayerTimeRelative() {
		return actualPlayer.isPlayerTimeRelative();
	}

	@Override
	public void resetPlayerTime() {
		actualPlayer.resetPlayerTime();
	}

	@Override
	public void setPlayerWeather(WeatherType type) {
		actualPlayer.setPlayerWeather(type);
	}

	@Override
	public WeatherType getPlayerWeather() {
		return actualPlayer.getPlayerWeather();
	}

	@Override
	public void resetPlayerWeather() {
		actualPlayer.resetPlayerWeather();
	}

	@Override
	public void giveExp(int amount) {
		actualPlayer.giveExp(amount);
	}

	@Override
	public void giveExpLevels(int amount) {
		actualPlayer.giveExpLevels(amount);
	}

	@Override
	public float getExp() {
		return actualPlayer.getExp();
	}

	@Override
	public void setExp(float exp) {
		actualPlayer.setExp(exp);
	}

	@Override
	public int getLevel() {
		return actualPlayer.getLevel();
	}

	@Override
	public void setLevel(int level) {
		actualPlayer.setLevel(level);
	}

	@Override
	public int getTotalExperience() {
		return actualPlayer.getTotalExperience();
	}

	@Override
	public void setTotalExperience(int exp) {
		actualPlayer.setTotalExperience(exp);
	}

	@Override
	public void sendExperienceChange(float progress) {
		actualPlayer.sendExperienceChange(progress);
	}

	@Override
	public void sendExperienceChange(float progress, int level) {
		actualPlayer.sendExperienceChange(progress, level);
	}

	@Override
	public float getExhaustion() {
		return actualPlayer.getExhaustion();
	}

	@Override
	public void setExhaustion(float value) {
		actualPlayer.setExhaustion(value);
	}

	@Override
	public float getSaturation() {
		return actualPlayer.getSaturation();
	}

	@Override
	public void setSaturation(float value) {
		actualPlayer.setSaturation(value);
	}

	@Override
	public int getFoodLevel() {
		return actualPlayer.getFoodLevel();
	}

	@Override
	public void setFoodLevel(int value) {
		actualPlayer.setFoodLevel(value);
	}

	@Override
	public boolean getAllowFlight() {
		return actualPlayer.getAllowFlight();
	}

	@Override
	public void setAllowFlight(boolean flight) {
		actualPlayer.setAllowFlight(flight);
	}

	@Override
	@Deprecated
	public void hidePlayer(Player player) {
		actualPlayer.hidePlayer(player);
	}

	@Override
	public void hidePlayer(Plugin plugin, Player player) {
		actualPlayer.hidePlayer(plugin, player);
	}

	@Override
	@Deprecated
	public void showPlayer(Player player) {
		actualPlayer.showPlayer(player);
	}

	@Override
	public void showPlayer(Plugin plugin, Player player) {
		actualPlayer.showPlayer(plugin, player);
	}

	@Override
	public boolean canSee(Player player) {
		return actualPlayer.canSee(player);
	}

	@Override
	public boolean isFlying() {
		return actualPlayer.isFlying();
	}

	@Override
	public void setFlying(boolean value) {
		actualPlayer.setFlying(value);
	}

	@Override
	public void setFlySpeed(float value) throws IllegalArgumentException {
		actualPlayer.setFlySpeed(value);
	}

	@Override
	public void setWalkSpeed(float value) throws IllegalArgumentException {
		actualPlayer.setWalkSpeed(value);
	}

	@Override
	public float getFlySpeed() {
		return actualPlayer.getFlySpeed();
	}

	@Override
	public float getWalkSpeed() {
		return actualPlayer.getWalkSpeed();
	}

	@Override
	@Deprecated
	public void setTexturePack(String url) {
		actualPlayer.setTexturePack(url);
	}

	@Override
	public void setResourcePack(String url) {
		actualPlayer.setResourcePack(url);
	}

	@Override
	public void setResourcePack(String url, byte[] hash) {
		actualPlayer.setResourcePack(url, hash);
	}

	@Override
	public Scoreboard getScoreboard() {
		return actualPlayer.getScoreboard();
	}

	@Override
	public void setScoreboard(Scoreboard scoreboard) throws IllegalArgumentException, IllegalStateException {
		actualPlayer.setScoreboard(scoreboard);
	}

	@Override
	public boolean isHealthScaled() {
		return actualPlayer.isHealthScaled();
	}

	@Override
	public void setHealthScaled(boolean scale) {
		actualPlayer.setHealthScaled(scale);
	}

	@Override
	public void setHealthScale(double scale) throws IllegalArgumentException {
		actualPlayer.setHealthScale(scale);
	}

	@Override
	public double getHealthScale() {
		return actualPlayer.getHealthScale();
	}

	@Override
	public Entity getSpectatorTarget() {
		return actualPlayer.getSpectatorTarget();
	}

	@Override
	public void setSpectatorTarget(Entity entity) {
		actualPlayer.setSpectatorTarget(entity);
	}

	@Override
	@Deprecated
	public void sendTitle(String title, String subtitle) {
		actualPlayer.sendTitle(title, subtitle);
	}

	@Override
	public void sendTitle(String title, String subtitle, int fadeIn, int stay, int fadeOut) {
		actualPlayer.sendTitle(title, subtitle, fadeIn, stay, fadeOut);
	}

	@Override
	public void resetTitle() {
		actualPlayer.resetTitle();
	}

	@Override
	public void spawnParticle(Particle particle, Location location, int count) {
		actualPlayer.spawnParticle(particle, location, count);
	}

	@Override
	public void spawnParticle(Particle particle, double x, double y, double z, int count) {
		actualPlayer.spawnParticle(particle, x, y, z, count);
	}

	@Override
	public <T> void spawnParticle(Particle particle, Location location, int count, T data) {
		actualPlayer.spawnParticle(particle, location, count, data);
	}

	@Override
	public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, T data) {
		actualPlayer.spawnParticle(particle, x, y, z, count, data);
	}

	@Override
	public void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ) {
		actualPlayer.spawnParticle(particle, location, count, offsetX, offsetY, offsetZ);
	}

	@Override
	public void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ) {
		actualPlayer.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ);
	}

	@Override
	public <T> void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, T data) {
		actualPlayer.spawnParticle(particle, location, count, offsetX, offsetY, offsetZ, data);
	}

	@Override
	public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, T data) {
		actualPlayer.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, data);
	}

	@Override
	public void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, double extra) {
		actualPlayer.spawnParticle(particle, location, count, offsetX, offsetY, offsetZ, extra);
	}

	@Override
	public void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra) {
		actualPlayer.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, extra);
	}

	@Override
	public <T> void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
		actualPlayer.spawnParticle(particle, location, count, offsetX, offsetY, offsetZ, extra, data);
	}

	@Override
	public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
		actualPlayer.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, extra, data);
	}

	@Override
	public AdvancementProgress getAdvancementProgress(Advancement advancement) {
		return actualPlayer.getAdvancementProgress(advancement);
	}

	@Override
	public int getClientViewDistance() {
		return actualPlayer.getClientViewDistance();
	}

	@Override
	public String getLocale() {
		return actualPlayer.getLocale();
	}

	@Override
	public void updateCommands() {
		actualPlayer.updateCommands();
	}

	@Override
	public void openBook(ItemStack book) {
		actualPlayer.openBook(book);
	}

	@Override
	public Spigot spigot() {
		return actualPlayer.spigot();
	}

	@Override
	public String getName() {
		return actualPlayer.getName();
	}

	@Override
	public PlayerInventory getInventory() {
		return actualPlayer.getInventory();
	}

	@Override
	public Inventory getEnderChest() {
		return actualPlayer.getEnderChest();
	}

	@Override
	public MainHand getMainHand() {
		return actualPlayer.getMainHand();
	}

	@Override
	public boolean setWindowProperty(InventoryView.Property prop, int value) {
		return actualPlayer.setWindowProperty(prop, value);
	}

	@Override
	public InventoryView getOpenInventory() {
		return actualPlayer.getOpenInventory();
	}

	@Override
	public InventoryView openInventory(Inventory inventory) {
		return actualPlayer.openInventory(inventory);
	}

	@Override
	public InventoryView openWorkbench(Location location, boolean force) {
		return actualPlayer.openWorkbench(location, force);
	}

	@Override
	public InventoryView openEnchanting(Location location, boolean force) {
		return actualPlayer.openEnchanting(location, force);
	}

	@Override
	public void openInventory(InventoryView inventory) {
		actualPlayer.openInventory(inventory);
	}

	@Override
	public InventoryView openMerchant(Villager trader, boolean force) {
		return actualPlayer.openMerchant(trader, force);
	}

	@Override
	public InventoryView openMerchant(Merchant merchant, boolean force) {
		return actualPlayer.openMerchant(merchant, force);
	}

	@Override
	public void closeInventory() {
		actualPlayer.closeInventory();
	}

	@Override
	@Deprecated
	public ItemStack getItemInHand() {
		return actualPlayer.getItemInHand();
	}

	@Override
	@Deprecated
	public void setItemInHand(ItemStack item) {
		actualPlayer.setItemInHand(item);
	}

	@Override
	public ItemStack getItemOnCursor() {
		return actualPlayer.getItemOnCursor();
	}

	@Override
	public void setItemOnCursor(ItemStack item) {
		actualPlayer.setItemOnCursor(item);
	}

	@Override
	public boolean hasCooldown(Material material) {
		return actualPlayer.hasCooldown(material);
	}

	@Override
	public int getCooldown(Material material) {
		return actualPlayer.getCooldown(material);
	}

	@Override
	public void setCooldown(Material material, int ticks) {
		actualPlayer.setCooldown(material, ticks);
	}

	@Override
	public int getSleepTicks() {
		return actualPlayer.getSleepTicks();
	}

	@Override
	public Location getBedSpawnLocation() {
		return actualPlayer.getBedSpawnLocation();
	}

	@Override
	public void setBedSpawnLocation(Location location) {
		actualPlayer.setBedSpawnLocation(location);
	}

	@Override
	public void setBedSpawnLocation(Location location, boolean force) {
		actualPlayer.setBedSpawnLocation(location, force);
	}

	@Override
	public boolean sleep(Location location, boolean force) {
		return actualPlayer.sleep(location, force);
	}

	@Override
	public void wakeup(boolean setSpawnLocation) {
		actualPlayer.wakeup(setSpawnLocation);
	}

	@Override
	public Location getBedLocation() {
		return actualPlayer.getBedLocation();
	}

	@Override
	public GameMode getGameMode() {
		return actualPlayer.getGameMode();
	}

	@Override
	public void setGameMode(GameMode mode) {
		actualPlayer.setGameMode(mode);
	}

	@Override
	public boolean isBlocking() {
		return actualPlayer.isBlocking();
	}

	@Override
	public boolean isHandRaised() {
		return actualPlayer.isHandRaised();
	}

	@Override
	public int getExpToLevel() {
		return actualPlayer.getExpToLevel();
	}

	@Override
	public boolean discoverRecipe(NamespacedKey recipe) {
		return actualPlayer.discoverRecipe(recipe);
	}

	@Override
	public int discoverRecipes(Collection<NamespacedKey> recipes) {
		return actualPlayer.discoverRecipes(recipes);
	}

	@Override
	public boolean undiscoverRecipe(NamespacedKey recipe) {
		return actualPlayer.undiscoverRecipe(recipe);
	}

	@Override
	public int undiscoverRecipes(Collection<NamespacedKey> recipes) {
		return actualPlayer.undiscoverRecipes(recipes);
	}

	@Override
	@Deprecated
	public Entity getShoulderEntityLeft() {
		return actualPlayer.getShoulderEntityLeft();
	}

	@Override
	@Deprecated
	public void setShoulderEntityLeft(Entity entity) {
		actualPlayer.setShoulderEntityLeft(entity);
	}

	@Override
	@Deprecated
	public Entity getShoulderEntityRight() {
		return actualPlayer.getShoulderEntityRight();
	}

	@Override
	@Deprecated
	public void setShoulderEntityRight(Entity entity) {
		actualPlayer.setShoulderEntityRight(entity);
	}

	@Override
	public double getEyeHeight() {
		return actualPlayer.getEyeHeight();
	}

	@Override
	public double getEyeHeight(boolean ignorePose) {
		return actualPlayer.getEyeHeight(ignorePose);
	}

	@Override
	public Location getEyeLocation() {
		return actualPlayer.getEyeLocation();
	}

	@Override
	public List<Block> getLineOfSight(Set<Material> transparent, int maxDistance) {
		return actualPlayer.getLineOfSight(transparent, maxDistance);
	}

	@Override
	public Block getTargetBlock(Set<Material> transparent, int maxDistance) {
		return actualPlayer.getTargetBlock(transparent, maxDistance);
	}

	@Override
	public List<Block> getLastTwoTargetBlocks(Set<Material> transparent, int maxDistance) {
		return actualPlayer.getLastTwoTargetBlocks(transparent, maxDistance);
	}

	@Override
	public Block getTargetBlockExact(int maxDistance) {
		return actualPlayer.getTargetBlockExact(maxDistance);
	}

	@Override
	public Block getTargetBlockExact(int maxDistance, FluidCollisionMode fluidCollisionMode) {
		return actualPlayer.getTargetBlockExact(maxDistance, fluidCollisionMode);
	}

	@Override
	public RayTraceResult rayTraceBlocks(double maxDistance) {
		return actualPlayer.rayTraceBlocks(maxDistance);
	}

	@Override
	public RayTraceResult rayTraceBlocks(double maxDistance, FluidCollisionMode fluidCollisionMode) {
		return actualPlayer.rayTraceBlocks(maxDistance, fluidCollisionMode);
	}

	@Override
	public int getRemainingAir() {
		return actualPlayer.getRemainingAir();
	}

	@Override
	public void setRemainingAir(int ticks) {
		actualPlayer.setRemainingAir(ticks);
	}

	@Override
	public int getMaximumAir() {
		return actualPlayer.getMaximumAir();
	}

	@Override
	public void setMaximumAir(int ticks) {
		actualPlayer.setMaximumAir(ticks);
	}

	@Override
	public int getMaximumNoDamageTicks() {
		return actualPlayer.getMaximumNoDamageTicks();
	}

	@Override
	public void setMaximumNoDamageTicks(int ticks) {
		actualPlayer.setMaximumNoDamageTicks(ticks);
	}

	@Override
	public double getLastDamage() {
		return actualPlayer.getLastDamage();
	}

	@Override
	public void setLastDamage(double damage) {
		actualPlayer.setLastDamage(damage);
	}

	@Override
	public int getNoDamageTicks() {
		return actualPlayer.getNoDamageTicks();
	}

	@Override
	public void setNoDamageTicks(int ticks) {
		actualPlayer.setNoDamageTicks(ticks);
	}

	@Override
	public Player getKiller() {
		return actualPlayer.getKiller();
	}

	@Override
	public boolean addPotionEffect(PotionEffect effect) {
		return actualPlayer.addPotionEffect(effect);
	}

	@Override
	@Deprecated
	public boolean addPotionEffect(PotionEffect effect, boolean force) {
		return actualPlayer.addPotionEffect(effect, force);
	}

	@Override
	public boolean addPotionEffects(Collection<PotionEffect> effects) {
		return actualPlayer.addPotionEffects(effects);
	}

	@Override
	public boolean hasPotionEffect(PotionEffectType type) {
		return actualPlayer.hasPotionEffect(type);
	}

	@Override
	public PotionEffect getPotionEffect(PotionEffectType type) {
		return actualPlayer.getPotionEffect(type);
	}

	@Override
	public void removePotionEffect(PotionEffectType type) {
		actualPlayer.removePotionEffect(type);
	}

	@Override
	public Collection<PotionEffect> getActivePotionEffects() {
		return actualPlayer.getActivePotionEffects();
	}

	@Override
	public boolean hasLineOfSight(Entity other) {
		return actualPlayer.hasLineOfSight(other);
	}

	@Override
	public boolean getRemoveWhenFarAway() {
		return actualPlayer.getRemoveWhenFarAway();
	}

	@Override
	public void setRemoveWhenFarAway(boolean remove) {
		actualPlayer.setRemoveWhenFarAway(remove);
	}

	@Override
	public EntityEquipment getEquipment() {
		return actualPlayer.getEquipment();
	}

	@Override
	public void setCanPickupItems(boolean pickup) {
		actualPlayer.setCanPickupItems(pickup);
	}

	@Override
	public boolean getCanPickupItems() {
		return actualPlayer.getCanPickupItems();
	}

	@Override
	public boolean isLeashed() {
		return actualPlayer.isLeashed();
	}

	@Override
	public Entity getLeashHolder() throws IllegalStateException {
		return actualPlayer.getLeashHolder();
	}

	@Override
	public boolean setLeashHolder(Entity holder) {
		return actualPlayer.setLeashHolder(holder);
	}

	@Override
	public boolean isGliding() {
		return actualPlayer.isGliding();
	}

	@Override
	public void setGliding(boolean gliding) {
		actualPlayer.setGliding(gliding);
	}

	@Override
	public boolean isSwimming() {
		return actualPlayer.isSwimming();
	}

	@Override
	public void setSwimming(boolean swimming) {
		actualPlayer.setSwimming(swimming);
	}

	@Override
	public boolean isRiptiding() {
		return actualPlayer.isRiptiding();
	}

	@Override
	public boolean isSleeping() {
		return actualPlayer.isSleeping();
	}

	@Override
	public void setAI(boolean ai) {
		actualPlayer.setAI(ai);
	}

	@Override
	public boolean hasAI() {
		return actualPlayer.hasAI();
	}

	@Override
	public void attack(Entity target) {
		actualPlayer.attack(target);
	}

	@Override
	public void swingMainHand() {
		actualPlayer.swingMainHand();
	}

	@Override
	public void swingOffHand() {
		actualPlayer.swingOffHand();
	}

	@Override
	public void setCollidable(boolean collidable) {
		actualPlayer.setCollidable(collidable);
	}

	@Override
	public boolean isCollidable() {
		return actualPlayer.isCollidable();
	}

	@Override
	public <T> T getMemory(MemoryKey<T> memoryKey) {
		return actualPlayer.getMemory(memoryKey);
	}

	@Override
	public <T> void setMemory(MemoryKey<T> memoryKey, T memoryValue) {
		actualPlayer.setMemory(memoryKey, memoryValue);
	}

	@Override
	public AttributeInstance getAttribute(Attribute attribute) {
		return actualPlayer.getAttribute(attribute);
	}

	@Override
	public void damage(double amount) {
		actualPlayer.damage(amount);
	}

	@Override
	public void damage(double amount, Entity source) {
		actualPlayer.damage(amount, source);
	}

	@Override
	public double getHealth() {
		return actualPlayer.getHealth();
	}

	@Override
	public void setHealth(double health) {
		actualPlayer.setHealth(health);
	}

	@Override
	public double getAbsorptionAmount() {
		return actualPlayer.getAbsorptionAmount();
	}

	@Override
	public void setAbsorptionAmount(double amount) {
		actualPlayer.setAbsorptionAmount(amount);
	}

	@Override
	@Deprecated
	public double getMaxHealth() {
		return actualPlayer.getMaxHealth();
	}

	@Override
	@Deprecated
	public void setMaxHealth(double health) {
		actualPlayer.setMaxHealth(health);
	}

	@Override
	@Deprecated
	public void resetMaxHealth() {
		actualPlayer.resetMaxHealth();
	}

	@Override
	public Location getLocation() {
		return actualPlayer.getLocation();
	}

	@Override
	public Location getLocation(Location loc) {
		return actualPlayer.getLocation(loc);
	}

	@Override
	public void setVelocity(Vector velocity) {
		actualPlayer.setVelocity(velocity);
	}

	@Override
	public Vector getVelocity() {
		return actualPlayer.getVelocity();
	}

	@Override
	public double getHeight() {
		return actualPlayer.getHeight();
	}

	@Override
	public double getWidth() {
		return actualPlayer.getWidth();
	}

	@Override
	public BoundingBox getBoundingBox() {
		return actualPlayer.getBoundingBox();
	}

	@Override
	public boolean isOnGround() {
		return actualPlayer.isOnGround();
	}

	@Override
	public World getWorld() {
		return actualPlayer.getWorld();
	}

	@Override
	public void setRotation(float yaw, float pitch) {
		actualPlayer.setRotation(yaw, pitch);
	}

	@Override
	public boolean teleport(Location location) {
		return actualPlayer.teleport(location);
	}

	@Override
	public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
		return actualPlayer.teleport(location, cause);
	}

	@Override
	public boolean teleport(Entity destination) {
		return actualPlayer.teleport(destination);
	}

	@Override
	public boolean teleport(Entity destination, PlayerTeleportEvent.TeleportCause cause) {
		return actualPlayer.teleport(destination, cause);
	}

	@Override
	public List<Entity> getNearbyEntities(double x, double y, double z) {
		return actualPlayer.getNearbyEntities(x, y, z);
	}

	@Override
	public int getEntityId() {
		return actualPlayer.getEntityId();
	}

	@Override
	public int getFireTicks() {
		return actualPlayer.getFireTicks();
	}

	@Override
	public int getMaxFireTicks() {
		return actualPlayer.getMaxFireTicks();
	}

	@Override
	public void setFireTicks(int ticks) {
		actualPlayer.setFireTicks(ticks);
	}

	@Override
	public void remove() {
		actualPlayer.remove();
	}

	@Override
	public boolean isDead() {
		return actualPlayer.isDead();
	}

	@Override
	public boolean isValid() {
		return actualPlayer.isValid();
	}

	@Override
	public Server getServer() {
		return actualPlayer.getServer();
	}

	@Override
	@Deprecated
	public boolean isPersistent() {
		return actualPlayer.isPersistent();
	}

	@Override
	@Deprecated
	public void setPersistent(boolean persistent) {
		actualPlayer.setPersistent(persistent);
	}

	@Override
	@Deprecated
	public Entity getPassenger() {
		return actualPlayer.getPassenger();
	}

	@Override
	@Deprecated
	public boolean setPassenger(Entity passenger) {
		return actualPlayer.setPassenger(passenger);
	}

	@Override
	public List<Entity> getPassengers() {
		return actualPlayer.getPassengers();
	}

	@Override
	public boolean addPassenger(Entity passenger) {
		return actualPlayer.addPassenger(passenger);
	}

	@Override
	public boolean removePassenger(Entity passenger) {
		return actualPlayer.removePassenger(passenger);
	}

	@Override
	public boolean isEmpty() {
		return actualPlayer.isEmpty();
	}

	@Override
	public boolean eject() {
		return actualPlayer.eject();
	}

	@Override
	public float getFallDistance() {
		return actualPlayer.getFallDistance();
	}

	@Override
	public void setFallDistance(float distance) {
		actualPlayer.setFallDistance(distance);
	}

	@Override
	public void setLastDamageCause(EntityDamageEvent event) {
		actualPlayer.setLastDamageCause(event);
	}

	@Override
	public EntityDamageEvent getLastDamageCause() {
		return actualPlayer.getLastDamageCause();
	}

	@Override
	public int getTicksLived() {
		return actualPlayer.getTicksLived();
	}

	@Override
	public void setTicksLived(int value) {
		actualPlayer.setTicksLived(value);
	}

	@Override
	public void playEffect(EntityEffect type) {
		actualPlayer.playEffect(type);
	}

	@Override
	public EntityType getType() {
		return actualPlayer.getType();
	}

	@Override
	public boolean isInsideVehicle() {
		return actualPlayer.isInsideVehicle();
	}

	@Override
	public boolean leaveVehicle() {
		return actualPlayer.leaveVehicle();
	}

	@Override
	public Entity getVehicle() {
		return actualPlayer.getVehicle();
	}

	@Override
	public void setCustomNameVisible(boolean flag) {
		actualPlayer.setCustomNameVisible(flag);
	}

	@Override
	public boolean isCustomNameVisible() {
		return actualPlayer.isCustomNameVisible();
	}

	@Override
	public void setGlowing(boolean flag) {
		actualPlayer.setGlowing(flag);
	}

	@Override
	public boolean isGlowing() {
		return actualPlayer.isGlowing();
	}

	@Override
	public void setInvulnerable(boolean flag) {
		actualPlayer.setInvulnerable(flag);
	}

	@Override
	public boolean isInvulnerable() {
		return actualPlayer.isInvulnerable();
	}

	@Override
	public boolean isSilent() {
		return actualPlayer.isSilent();
	}

	@Override
	public void setSilent(boolean flag) {
		actualPlayer.setSilent(flag);
	}

	@Override
	public boolean hasGravity() {
		return actualPlayer.hasGravity();
	}

	@Override
	public void setGravity(boolean gravity) {
		actualPlayer.setGravity(gravity);
	}

	@Override
	public int getPortalCooldown() {
		return actualPlayer.getPortalCooldown();
	}

	@Override
	public void setPortalCooldown(int cooldown) {
		actualPlayer.setPortalCooldown(cooldown);
	}

	@Override
	public Set<String> getScoreboardTags() {
		return actualPlayer.getScoreboardTags();
	}

	@Override
	public boolean addScoreboardTag(String tag) {
		return actualPlayer.addScoreboardTag(tag);
	}

	@Override
	public boolean removeScoreboardTag(String tag) {
		return actualPlayer.removeScoreboardTag(tag);
	}

	@Override
	public PistonMoveReaction getPistonMoveReaction() {
		return actualPlayer.getPistonMoveReaction();
	}

	@Override
	public BlockFace getFacing() {
		return actualPlayer.getFacing();
	}

	@Override
	public Pose getPose() {
		return actualPlayer.getPose();
	}

	@Override
	public void setMetadata(String metadataKey, MetadataValue newMetadataValue) {
		actualPlayer.setMetadata(metadataKey, newMetadataValue);
	}

	@Override
	public List<MetadataValue> getMetadata(String metadataKey) {
		return actualPlayer.getMetadata(metadataKey);
	}

	@Override
	public boolean hasMetadata(String metadataKey) {
		return actualPlayer.hasMetadata(metadataKey);
	}

	@Override
	public void removeMetadata(String metadataKey, Plugin owningPlugin) {
		actualPlayer.removeMetadata(metadataKey, owningPlugin);
	}

	@Override
	public void sendMessage(String message) {
		actualPlayer.sendMessage(message);
	}

	@Override
	public void sendMessage(String[] messages) {
		actualPlayer.sendMessage(messages);
	}

	@Override
	public boolean isPermissionSet(String name) {
		return actualPlayer.isPermissionSet(name);
	}

	@Override
	public boolean isPermissionSet(Permission perm) {
		return actualPlayer.isPermissionSet(perm);
	}

	@Override
	public boolean hasPermission(String name) {
		return actualPlayer.hasPermission(name);
	}

	@Override
	public boolean hasPermission(Permission perm) {
		return actualPlayer.hasPermission(perm);
	}

	@Override
	public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
		return actualPlayer.addAttachment(plugin, name, value);
	}

	@Override
	public PermissionAttachment addAttachment(Plugin plugin) {
		return actualPlayer.addAttachment(plugin);
	}

	@Override
	public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
		return actualPlayer.addAttachment(plugin, name, value, ticks);
	}

	@Override
	public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
		return actualPlayer.addAttachment(plugin, ticks);
	}

	@Override
	public void removeAttachment(PermissionAttachment attachment) {
		actualPlayer.removeAttachment(attachment);
	}

	@Override
	public void recalculatePermissions() {
		actualPlayer.recalculatePermissions();
	}

	@Override
	public Set<PermissionAttachmentInfo> getEffectivePermissions() {
		return actualPlayer.getEffectivePermissions();
	}

	@Override
	public boolean isOp() {
		return actualPlayer.isOp();
	}

	@Override
	public void setOp(boolean value) {
		actualPlayer.setOp(value);
	}

	@Override
	public String getCustomName() {
		return actualPlayer.getCustomName();
	}

	@Override
	public void setCustomName(String name) {
		actualPlayer.setCustomName(name);
	}

	@Override
	public PersistentDataContainer getPersistentDataContainer() {
		return actualPlayer.getPersistentDataContainer();
	}

	@Override
	public <T extends Projectile> T launchProjectile(Class<? extends T> projectile) {
		return actualPlayer.launchProjectile(projectile);
	}

	@Override
	public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity) {
		return actualPlayer.launchProjectile(projectile, velocity);
	}

	@Override
	public boolean isConversing() {
		return actualPlayer.isConversing();
	}

	@Override
	public void acceptConversationInput(String input) {
		actualPlayer.acceptConversationInput(input);
	}

	@Override
	public boolean beginConversation(Conversation conversation) {
		return actualPlayer.beginConversation(conversation);
	}

	@Override
	public void abandonConversation(Conversation conversation) {
		actualPlayer.abandonConversation(conversation);
	}

	@Override
	public void abandonConversation(Conversation conversation, ConversationAbandonedEvent details) {
		actualPlayer.abandonConversation(conversation, details);
	}

	@Override
	public boolean isOnline() {
		return actualPlayer.isOnline();
	}

	@Override
	public boolean isBanned() {
		return actualPlayer.isBanned();
	}

	@Override
	public boolean isWhitelisted() {
		return actualPlayer.isWhitelisted();
	}

	@Override
	public void setWhitelisted(boolean value) {
		actualPlayer.setWhitelisted(value);
	}

	@Override
	public Player getPlayer() {
		return actualPlayer.getPlayer();
	}

	@Override
	public long getFirstPlayed() {
		return actualPlayer.getFirstPlayed();
	}

	@Override
	public long getLastPlayed() {
		return actualPlayer.getLastPlayed();
	}

	@Override
	public boolean hasPlayedBefore() {
		return actualPlayer.hasPlayedBefore();
	}

	@Override
	public void incrementStatistic(Statistic statistic) throws IllegalArgumentException {
		actualPlayer.incrementStatistic(statistic);
	}

	@Override
	public void decrementStatistic(Statistic statistic) throws IllegalArgumentException {
		actualPlayer.decrementStatistic(statistic);
	}

	@Override
	public void incrementStatistic(Statistic statistic, int amount) throws IllegalArgumentException {
		actualPlayer.incrementStatistic(statistic, amount);
	}

	@Override
	public void decrementStatistic(Statistic statistic, int amount) throws IllegalArgumentException {
		actualPlayer.decrementStatistic(statistic, amount);
	}

	@Override
	public void setStatistic(Statistic statistic, int newValue) throws IllegalArgumentException {
		actualPlayer.setStatistic(statistic, newValue);
	}

	@Override
	public int getStatistic(Statistic statistic) throws IllegalArgumentException {
		return actualPlayer.getStatistic(statistic);
	}

	@Override
	public void incrementStatistic(Statistic statistic, Material material) throws IllegalArgumentException {
		actualPlayer.incrementStatistic(statistic, material);
	}

	@Override
	public void decrementStatistic(Statistic statistic, Material material) throws IllegalArgumentException {
		actualPlayer.decrementStatistic(statistic, material);
	}

	@Override
	public int getStatistic(Statistic statistic, Material material) throws IllegalArgumentException {
		return actualPlayer.getStatistic(statistic, material);
	}

	@Override
	public void incrementStatistic(Statistic statistic, Material material, int amount) throws IllegalArgumentException {
		actualPlayer.incrementStatistic(statistic, material, amount);
	}

	@Override
	public void decrementStatistic(Statistic statistic, Material material, int amount) throws IllegalArgumentException {
		actualPlayer.decrementStatistic(statistic, material, amount);
	}

	@Override
	public void setStatistic(Statistic statistic, Material material, int newValue) throws IllegalArgumentException {
		actualPlayer.setStatistic(statistic, material, newValue);
	}

	@Override
	public void incrementStatistic(Statistic statistic, EntityType entityType) throws IllegalArgumentException {
		actualPlayer.incrementStatistic(statistic, entityType);
	}

	@Override
	public void decrementStatistic(Statistic statistic, EntityType entityType) throws IllegalArgumentException {
		actualPlayer.decrementStatistic(statistic, entityType);
	}

	@Override
	public int getStatistic(Statistic statistic, EntityType entityType) throws IllegalArgumentException {
		return actualPlayer.getStatistic(statistic, entityType);
	}

	@Override
	public void incrementStatistic(Statistic statistic, EntityType entityType, int amount) throws IllegalArgumentException {
		actualPlayer.incrementStatistic(statistic, entityType, amount);
	}

	@Override
	public void decrementStatistic(Statistic statistic, EntityType entityType, int amount) {
		actualPlayer.decrementStatistic(statistic, entityType, amount);
	}

	@Override
	public void setStatistic(Statistic statistic, EntityType entityType, int newValue) {
		actualPlayer.setStatistic(statistic, entityType, newValue);
	}

	@Override
	public Map<String, Object> serialize() {
		return actualPlayer.serialize();
	}

	@Override
	public void sendPluginMessage(Plugin source, String channel, byte[] message) {
		actualPlayer.sendPluginMessage(source, channel, message);
	}

	@Override
	public Set<String> getListeningPluginChannels() {
		return actualPlayer.getListeningPluginChannels();
	}
}
